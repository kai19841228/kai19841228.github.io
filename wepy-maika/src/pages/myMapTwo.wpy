<style lang="less">
#wxMap{
  width: 100%;
  position: relative;
  flex: 1;
}
.callout{
  position: absolute;
  top: 50%;
  left: 50%;
  transform:translate(-50%,-300%);
  background-color: #ffffff;
  padding: 3px 8px;
  border-radius: 10px;
  font-size: 12px;
  &:after{
    content: '';
    width:0;
    height:0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 5px solid #ffffff;
    position: absolute;
    top: 96%;
    left: 44%;
  }
  .txt{
    color: #ff8400;
  }
}
</style>
<template>
  <view class="container">
  <view>
    <button @tap="tapHs">改变高度地图自适应高度</button>
    <view hidden="{{isb}}">465</view>
  </view>
    <map id="wxMap" show-location="true" longitude="{{longitude}}" latitude="{{latitude}}" polyline="{{polyline}}" show-compass="true" scale="{{scale}}" markers="{{markers}}" @markertap="makertap" @regionchange="regionchange" controls="{{controls}}" @controltap="controltap">
      <view class="callout" hidden="{{isCallout}}"><text class="txt">1分钟</text>之后上车</view>
    </map>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import global from '../mixins/global'
  // import order from '../utils/order'
  import map from '../js/map'
  // var amap = require('../static/js/amap-wx.js')
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '地图'
    }
    components = { // 声明页面所引用的子组件
    }
    mixins = [global] // 声明页面所引用的Mixin实例
    data = {
      scale: 16,
      includePoint: [],
      latitude: [],
      longitude: [],
      myAmapFun: '',
      markersData: '',
      mapCtx: '',
      markers: [],
      polyline: [{
        points: [
          {
            latitude: 39.921737,
            longitude: 116.443457
          }, {
            longitude: 116.44345,
            latitude: 39.921422
          }
        ],
        color: '#ff6600',
        width: 2,
        dottedLine: false,
        arrowLine: true,
        borderColor: '#000',
        borderWidth: 5
      }],
      isb: true,
      timer: '',
      isCallout: true,
      controls: []
    }
    computed = { // 声明[计算属性]
      now () {
        return +new Date()
      }
    }
    watch = {} // 声明数据watcher
    methods = { // 声明页面响应事件。注意，此处只用于声明页面bind，catch事件
      tapHs () {
        var that = this
        this.isb = !this.isb
        setTimeout(function () {
          that.controlInit()
        }, 100)
      },
      makertap (e) {
        console.log(e)
        // var id = e.markerId
      },
      regionchange (e) {
        let that = this
        that.isCallout = true
        if (e.detail.type !== 'end') return
        function getCenterLocation (vm, data) {
          // 地图拖动，获取经纬度 返回地址信息。
          map.regeoData(that, {latitude: data.latitude, longitude: data.longitude})
        }
        if (that.timer != null) clearInterval(that.timer)
        that.timer = setTimeout(function () {
          map.getCenterLocation(that, getCenterLocation)
        }, 300)
        that.isCallout = false
      },
      controltap (e) {
        var that = this
        if (e.controlId === 1) {
          console.log('点击id为1的controls要执行的操作')
          map.goToLocation(that)
        } else if (e.controlId === 2) {
          console.log('点击id为2的controls要执行的操作')
        } else if (e.controlId === 3) {
          console.log('点击id为3的controls要执行的操作')
        }
      }
    }
    controlInit () {
      var that = this
      // 获取地图高度，在计算图标坐标。设置controls
      const query = wx.createSelectorQuery()
      query.select('#wxMap').boundingClientRect()
      query.exec((res) => {
        // const sys = wx.getSystemInfoSync()
        let top = res[0].height - 50
        let left = res[0].width - 50
        that.controls = [{
          id: 1,
          iconPath: '/static/location.png',
          position: {
            left: left,
            top: top,
            width: 40,
            height: 40
          },
          clickable: true
        },
        {
          id: 2,
          iconPath: '/static/poi.png',
          position: {
            left: res[0].width / 2 - 18,
            top: res[0].height / 2 - 38,
            width: 36,
            height: 36
          },
          clickable: true
        },
        {
          id: 3,
          iconPath: '/static/arrow.png',
          position: {
            left: 10,
            top: res[0].height - 50,
            width: 40,
            height: 40
          },
          clickable: true
        }]
        that.$apply()
        // 设置完controls ，可以更改图片
        setTimeout(function () {
          that.controls[1].iconPath = '/static/sqyc_marker_qi.png'
          that.$apply()
        }, 3000)
      })
    }
    events = { // 声明组件之间的事件传递
    }
    onLoad(options) {
      console.log(options)
    }
    onReady() {
    }
    onShow () {
      var that = this
      map.mapInit(that)
      // 获取定位位置坐标
      function getLocation (vm, data) {
        console.log('当前经纬度：')
        console.log(data)
        that.includePoint.push({latitude: data.latitude, longitude: data.longitude})
        that.latitude = data.latitude
        that.longitude = data.longitude
        setTimeout(function () {
          map.goToLocation(that)
        }, 300)
        vm.$apply()
      }
      map.getLocation(that, getLocation)
      // 获取定位位置或指定位置的详细地址信息，逆地理编码
      function getRegeo (vm, data) {
        console.log('当前经纬度逆地理：')
        console.log(data)
      }
      map.getRegeo(that, getRegeo)
      // 获取POI数据
      function getPoiAround (vm, data) {
        vm.markersData = data.markers
        var newMarkers = []
        vm.polyline[0].points = []
        vm.markersData.forEach(function (item, index) {
          if (index < 16) return
          newMarkers.push({
            id: item.id,
            latitude: item.latitude,
            longitude: item.longitude,
            iconPath: '/static/sqyc_marker.png',
            width: 40,
            height: 40,
            callout: {
              content: item.latitude + '' + item.longitude,
              color: '#333333',
              fontSize: '12',
              borderRadius: 15,
              bgColor: '#ffffff',
              padding: 10,
              display: 'ALWAYS',
              textAlign: 'center'
            }
          })
          vm.polyline[0].points.push({
            longitude: item.longitude,
            latitude: item.latitude
          })
        })
        console.log(map.getDistance(vm.polyline[0].points[1].latitude, vm.polyline[0].points[1].longitude, vm.polyline[0].points[2].latitude, vm.polyline[0].points[2].longitude))
        console.log(map.GetDistance(vm.polyline[0].points[1].latitude, vm.polyline[0].points[1].longitude, vm.polyline[0].points[2].latitude, vm.polyline[0].points[2].longitude))
        // map.includePoint(vm, vm.polyline[0].points)
        vm.markers = vm.markers.concat(newMarkers)
        vm.$apply()
      }
      map.getPoiAround(that, {}, getPoiAround)
      that.controlInit() // 初始化controls， 如果地图宽高变化了。要重新初始化，
    } // 只在 Page 实例中会存在页面生命周期函数
  }
</script>
