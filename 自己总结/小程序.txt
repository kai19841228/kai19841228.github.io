小程序管理平台：https://mp.weixin.qq.com/   (公司账号weixin@01zhuanche.com / zhuanche123$)
添加管理员-尽量多的权限，不然发版什么的老找领导 添加开发者-开发权限 
小程序ID  wx89661ebf2c5429c6   小程序密钥  ae40f83b7d0923185a42c678b9690836
王立冬    15911085932@163.com 微信公众平台账号 密码 **328*** 手机号 15911085932 微信绑定 305153482

/*** 参考 https://www.cnblogs.com/grs9505/p/11438117.html  https://www.jianshu.com/p/02268d14fbe9
NPM 构建小程序 project.config 配置 "compileType": "miniprogram",
    进入小程序目录 执行npm init  
    然后安装npm包    npm install --save mobx-miniprogram mobx-miniprogram-bindings
    然后在小程序工具里 构建npm
    https://developers.weixin.qq.com/miniprogram/dev/extended/utils/mobx.html
/***

去除html标签开始 ====================
let richText = ' <p style="font-size: 25px;color: white">       sdaflsjf的丰富及饿哦塞尔</p><span>dsfjlie</span>';
/* 去除富文本中的html标签 */
/* *、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。*/
let content = richText.replace(/<.+?>/g, '');
console.log(content);
/* 去除  */
content = content.replace(/ /ig, '');
console.log(content);
/* 去除空格 */
content = content.replace(/\s/ig, '');
console.log(content);
去除html标签结束 ====================

mkcx2019!! 麦卡出行市场密码


this.$parent.globalData                  在page 获取到app的globalData数据

let _tripDetails = function() {
  let _self = this
  let _params = {
    orderNo: this.data._orderNo,
    clientType: this.data._clientType,
    coordinate: this.data._coordinate
  }
}
_tripDetails.call(this)
/*隐藏小程序滚动条*/ 必须添加到page的样式里，不能写在组件的样式里，会报错！！！
::-webkit-scrollbar{
	display: none;
}
隐藏scroll-view滚动条  写在page的css里                                                methods: {}
::-webkit-scrollbar {
  width: 0;
  height: 0;
  color: transparent;
}
observers数据监听器 https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html
computed 自定义组件计算属性 https://github.com/wechat-miniprogram/computed
组件间通信与事件  https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html
小程序更新机制   https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/update-mechanism.html
Page({                                                                             在 js 中读取页面的显示区域尺寸  还可以用媒体查询来改变显示
  onResize(res) {  
    res.size.windowWidth // 新的显示区域宽度
    res.size.windowHeight // 新的显示区域高度
  }
})
box-sizing:border-box;和overflow:hidden; 页面容器有时候要加上，布局受影响                  "pageOrientation": "auto" 小程序在手机上支持屏幕旋转
//``组装代码，${data变量} data变量                                                      "resizable": true        在 iPad 上启用屏幕旋转支持
let url = `../Order/status?orderid=${res.data.orderId}&orderno=${res.data.orderNo}`
data: {
    text: 'Set some data for updating view.'
  }
this.data.text
var app = getApp()  获取小程序实例   getDate(new Date()) 返回当前日期的 多少号
var pages = getCurrentPages()
pages.length  pages[0].data.text
this.setData({
      text: "hello world!"
    }, function () {
      console.log("text 改变")
    })
wx.getSystemInfoSync().windowWidth;// 屏幕宽度
小程序模块化  https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html  var common = require('common.js') 引入使用common里边的方法
<wxs module="wxs" src="./test.wxs"></wxs>   在wxs里写变量和函数，在wxml里引入，https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html
<view id="tapTest" data-hi="WeChat" bindtap="{{wxs.tapName}}"> Click me! </view>
尺寸单位：rpx         小程序的尺寸单位
样式导入 @import      @import "common.wxss";
// 设置本页导航标题
    wx.setNavigationBarTitle({
      title: '个人中心'
    })
pageScrollTo 页面滚动  
loadFontFace 动态加载网络字体。文件地址需为下载类型。iOS 仅支持 https 格式文件地址。
页头loading   wx.showNavigationBarLoading()  显示 wx.hideNavigationBarLoading() 隐藏
// loading显示    wx.hideLoading()loading隐藏
wx.showLoading({
      title: "正在登录"
    });
// Toast提示框     隐藏 wx.hideToast()
wx.showToast({
            title: res.data.data.msg,
            icon: 'success',
            duration: 2000
          })
//显示模态弹窗
wx.showModal({
  title: '提示',
  content: '这是一个模态弹窗',
  success: function(res) {
    if (res.confirm) {
      console.log('用户点击确定')
    } else if (res.cancel) {
      console.log('用户点击取消')
    }
  }
})
//显示操作菜单
wx.showActionSheet({
  itemList: ['A', 'B', 'C'],
  itemColor: '#007aff',
  success: function(res) {
    console.log(res.tapIndex)
  },
  fail: function(res) {
    console.log(res.errMsg)
  }
})
// 2.获取并设置当前位置经纬度
    wx.getLocation({
      type: "gcj02",
      success: (res) => {
        this.setData({
          longitude: res.longitude,
          latitude: res.latitude
        })
      }
    });
if判断
wx:if="{{item.id && item.lessNum != 0}}"
3、for循环
<block wx:for="{{signList}}" wx:key="unique"></block>
 // 同步方式存储表单数据  this.setData({ loadHidden: false })
      wx.setStorage({
        key: 'userName',
        data: objData.userName
      });
//获取本地数据
    wx.getStorage({
      key: 'userName',
      success: function (res) {
        console.log(res.data);
        that.setData({ userName: res.data });
      }
    });
//跳转到成功页面  js控制跳转
      wx.navigateTo({
        url: '../lineOrder/index'
      })
页面重定向 wx.redirectTo({url:'/pages/home/home'})
页面返回 wx.navigateBack() wx.navigateBack({ delta: 1 })  delta是返回几个page
wx.reLaunch({url:'/pages/home/home'})     关闭所有页面，打开到应用内的某个页面。
wx.switchTab({url: '/index'})             跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
5、自定义属性
<view class='showList '  bindtop='shopPost'   data-shopId='item.goods_id' ></view>
js取值  shopPost:function(event){   var postId = event.currentTarget.dataset.postid }

Html带参数，如果需要传多个参数, 用 & 链接即可
<navigator url="../navigator/navigator?title=我是navigate" >跳转到新页面</navigator>
下一个页面接受参数
onLoad: function(options) {    
    this.setData({    
      title: options.title    
    })    
  }
如果要传 数组, 字典等复杂类型, 要先用 JSON.stringify() 转成字符串传递.
// 提供本模块使用的辅助变量，可以使用这些变量直接调用对应组件的接口 ，然后就可以调用实例的当前组件的方法.
// FlightArriveTime是组件的id
onReady: function () {
this.$flightT = this.selectComponent('#FlightArriveTime')
}
this.$flightT.showModal(); showModal是组件里的方法
Mxbx  状态管理
在组件内使用
import posListService from '../../stores/posList'   引入
posListService.acSetCurrentPos(this.data.posType, posItem)  使用
在page页引用
import posList from '../../stores/posList'   引入
stores: { posList, cityList },               在page里设置下。

在js里调用     this.stores.cityList.fetchCurrentCity()          调用store里的函数
             this.stores.cityList.acSetCurrentCity(e.detail)  出发action
在页面wxml调用 {{ stores.cityList.currentCityRes }}

微信小程序分页功能（上拉触底事件）       http://www.wxapp-union.com/article-2926-1.html
微信小程序---左滑删除                 https://github.com/demi520/wxapp-leftSwiperDel
ZUI 为 微信小程序 量身设计            https://github.com/demi520/zui
微信小程序带字母滑动的listview城市选择  https://github.com/demi520/wx-alphabetical-listview
微信小程序--滚动数字                  https://github.com/demi520/wxapp-animateNumber
微信小程序 仿jQuery插件              https://github.com/demi520/wx-query
在主 app。js里配置
var wxQuery = require('./utils/wxquery.js');
App({
    /** 全局引入wxQuery */
    wxQuery : wxQuery,
    $ : wxQuery.$
})
内页调用   var app = getApp();
Page({
    name : 'example',  /** 如果绑定事件 需要注册一个name属性 */
    data : {
    },
    onLoad : function () {
        /** 注册事件源 */
		app.wxQuery.register(this);
    },
    onShow : function () {
        /** 重新注册事件源 */
		app.wxQuery.register(this);
    },
    /**
	 * 事件处理
	 */
	eventManage : function (e) {
		app.wxQuery.callEvent(e);
	}
});
WeToast for 微信小程序 toast增强插件  https://github.com/kiinlam/wetoast
微信小程序 之『引入es6 promise』      https://github.com/cinoliu/-es6-promise
微信小程序--二维码生成器              https://github.com/demi520/wxapp-qrcode
微信小程序 - 自定义组件               https://github.com/skyvow/wux
各种验证格式                        https://github.com/skyvow/wux/blob/master/dist/assets/plugins/WxValidate.js
微信小程序－省市区三级联动             https://github.com/treadpit/wx_selectArea
基于微信小程序开发的仿微信demo         https://github.com/liujians/WeApp
微信小程序demo 仿手机淘宝             https://github.com/ChangQing666/wechat-weapp-taobao
微信小程序-仿饿了么                  https://github.com/ayjacket/eleme
ofo小程序                          https://github.com/MiceLiD/ofo-applet

下拉刷新也可以用 scroll-view组件来实现， bindscrolltoupper bindscrolltolower bindscroll
https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html
http://www.jb51.net/article/102953.htm
用scroll-view组件 必须要设置高度才能监听滚动事件
wx.getSystemInfo({
     success:function(res){
       that.setData({
         scrollHeight:res.windowHeight
       });
     }
   });

下拉刷新，上拉加载 用小程序原生支持的效果。 如果不需要可以wx.stopPullDownRefresh() 马上恢复
配置在app。json里后边的都会有上拉下拉，可以把配置放在需要的页面的json配置里。下拉刷新不行，上拉加载没问题
1 在app。json  
"window": {
    "backgroundTextStyle": "light",
    "backgroundColor": "#000000", 小程序背景颜色，
    "navigationBarBackgroundColor": "#1AAD16", 小程序标题背景
    "navigationBarTitleText": "wxQuery", 小程序标题
    "navigationBarTextStyle": "white", 小程序标题颜色
    "enablePullDownRefresh": true 启用下拉和上拉
  }
2 在子page里就可以调用了
Page({
  /**
   * 页面的初始数据
   */
  data: {
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
  },
  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
  },
  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
  },
  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {
  },
  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {
  },
  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {
  console.log("下拉刷新")
  wx.stopPullDownRefresh()
  },
  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {
  console.log('上拉加载更多')
  wx.stopPullDownRefresh()
  },
  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {
    return {
      title: '分享标题',
      desc: '分享描述',
      path: '/pages/index/index',
      success: function(res) {
        console.log('分享成功')
      },
      fail: function(res) {
        console.log('分享失败')
      }
    }
  }
  methods: {
    onLoad: function() {
      this.data.paramA // 页面参数 paramA 的值
      this.data.paramB // 页面参数 paramB 的值
    }
  }
})
APPjs生命周期和globalData  globalData里异步获取系统信息，方便其他地方调用。
App({
  onLaunch: function(options) {
    // Do something initial when launch.
  },
  onShow: function(options) {
      // Do something when show.
  },
  onHide: function() {
      // Do something when hide.
  },
  onError: function(msg) {
    console.log(msg)
  },
  globalData: {
    systemInfo: wx.getSystemInfoSync(),异步获取系统信息，
    userInfo: null
  }
})


异步处理 json
wx.request({
      url: 'https://api.douban.com/v2/movie/top250',
      method:"GET",
      header: {
        'Content-Type': 'json'
      },
      success: function (res) {
        console.log(res.data.subjects);
        var date = res.data.subjects;
        that.setData({
          list: date
        })
      },
      fail: function () {
        console.log("接口调用失败");
      }
    })

var pagelist = getCurrentPages();  获取所有的pages列表
var currentPage = pagelist[pagelist.length - 1];  获取当前page
var prePage = pagelist[pagelist.length - 2];   获取当前页的前一个page

小程序提供了两个引入外部模板的方法：import和include  http://www.wxapp-union.com/article-2958-1.html

微信小程序开发--页面传值
正向传值：上一页面 -->  下一页面
 *              1.url传值
 *              2.本地储存
 *              3.全局的app对象
反向传值：下一页面 -->  上一页面
 *              1.本地储存
 *              2.全局的app对象
var goodsid3 = 'A2B3'
wx.navigateTo({
  url: '../Bpage/index?goodsId=' + goodsid3,
})
在生命周期的load事件了获取数据
onLoad: function(options) {    
    this.setData({    
      title: options.goodsId   
    })    
  }

应用生命周期
1、用户首次打开小程序，触发 onLaunch（全局只触发一次）。
2、小程序初始化完成后，触发onShow方法，监听小程序显示。
3、小程序从前台进入后台，触发 onHide方法。
4、小程序从后台进入前台显示，触发 onShow方法。
5、小程序后台运行一定时间，或系统资源占用过高，会被销毁。

前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。

页面生命周期
1、小程序注册完成后，加载页面，触发onLoad方法，一个页面只会调用一次。
2、页面载入后触发onShow方法，显示页面，每次打开页面都会调用一次。
3、首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次。
4、当小程序后台运行或跳转到其他页面时，触发onHide方法。
5、当小程序有后台进入到前台运行或重新进入页面时，触发onShow方法。
6、当使用重定向方法wx.redirectTo(OBJECT)或关闭当前页返回上一页wx.navigateBack()，触发onUnload

wx.navigateTo跳转状态下，页面A和页面B的生命周期逻辑

1、进入A页面：A执行onLoad()-->onShow()-->onReady()；
2、A页面navigateTo B页面：A执行onHide()，B执行onLoad()-->onShow()-->onReady()；
3、B页面返回A页面：B执行onUnload()，A执行onShow()；
4、退出A页面：A执行onUnload()。

应用生命周期影响页面生命周期
1、小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。
2、当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。
3、当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。


wx.createSelectorQuery()              微信小程序操作dom元素节点

<view>
    <text class="title" id="productServe">产品服务</text>
    <text class="title" id="enterpriseServe">企业服务</text>
    <text class="title" id="normalServe">常用应用</text>
</view>

Page({
  //声明节点查询的方法
  queryMultipleNodes: function() {
    const query = wx.createSelectorQuery()                // 创建节点查询器 query
    query.select('#productServe').boundingClientRect()    // 这段代码的意思是选择Id=productServe的节点，获取节点位置信息的查询请求
    query.select('#enterpriseServe').boundingClientRect() // 这段代码的意思是选择Id=enterpriseServe的节点，获取节点位置信息的查询请求
    query.select('#normalServe').boundingClientRect()     // 这段代码的意思是选择Id=normalServe的节点，获取节点位置信息的查询请求
    query.selectViewport().scrollOffset()                 // 这段代码的意思是获取页面滑动位置的查询请求
    query.exec((res) => {
      res[0].top                                          // #productServe节点的到页面顶部的距离
      res[1].width                                        // #enterpriseServe节点的宽度
      res[2].height                                       // #normalServe节点的高度
    })
  }
})
――――――――――――============获取显示区域的滚动top值
			const query = wx.createSelectorQuery()
			query.selectViewport().scrollOffset(function(res){
			  res.scrollTop // 显示区域的竖直滚动位置
			  console.log(res)
			})
			query.exec()